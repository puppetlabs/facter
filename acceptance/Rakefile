require 'rake/clean'
require 'pp'
require 'yaml'

ONE_DAY_IN_SECS = 24 * 60 * 60
PRESERVED_HOSTS_FILENAME = 'hosts_preserved.yml'
SUTS_FILENAME = 'sut.log'
CLEAN.include('*.tar', 'merged_options.rb')

module HarnessOptions

  DEFAULTS = {
    :tests  => ['tests'],
    :ssh => {
      :keys => ["~/.ssh/id_rsa-acceptance"],
    },
    :preserve_hosts => 'onfail',
  }

  class Aggregator
    attr_reader :mode

    def initialize(mode)
      @mode = mode
    end

    def get_options(file_path)
      puts "Attempting to merge config file: #{file_path}"
      if File.exists? file_path
        options = eval(File.read(file_path), binding)
      else
        puts "No options file found at #{File.expand_path(file_path)}"
      end
      options || {}
    end

    def get_mode_options
      get_options("./config/#{mode}/options.rb")
    end

    def get_local_options
      get_options("./local_options.rb")
    end

    def final_options(intermediary_options = {})
      mode_options = get_mode_options
      local_overrides = get_local_options
      final_options = DEFAULTS.merge(mode_options)
      final_options.merge!(intermediary_options)
      final_options.merge!(local_overrides)
      return final_options
    end
  end

  def self.options(mode, options)
    final_options = Aggregator.new(mode).final_options(options)
    final_options
  end
end

def hosts
  if ENV['HOSTS']
    ENV['HOSTS']
  else
    puts 'Warning: environment variable CONFIG deprecated. Please use HOSTS to match beaker options.'
    ENV['CONFIG']
  end
end

def tests
  ENV['TESTS'] || ENV['TEST']
end

def generate_beaker_cli_flags(options_file)
  # the options file (including the default options might also have tests
  #   they'll get merged with the below by beaker
  tests_opt = "--tests=#{tests}" if tests

  hosts_opt = "--hosts=#{hosts}" if hosts

  overriding_options = ENV['OPTIONS']

  # compact to remove the nil elements
  ["--options-file", options_file, hosts_opt, tests_opt, overriding_options].compact
end

def write_merged_options_file(mode,options)
  final_options = HarnessOptions.options(mode, options)

  options_file = 'merged_options.rb'
  File.open(options_file, 'w') do |merged|
    merged.puts <<-EOS
# Copy this file to local_options.rb and adjust as needed if you wish to run
# with some local overrides.
EOS
    merged.puts(final_options.pretty_inspect)
  end
  return options_file
end

def beaker_test(mode = :aio, options = {})
  options_file = write_merged_options_file(mode,options)
  args = generate_beaker_cli_flags(options_file)

  begin
    sh("beaker", *args)
  ensure
    mv(options_file, "log/latest")
    puts "\n\n"
  end
end

def list_preserved_hosts(secs_ago = ONE_DAY_IN_SECS)
  hosts = Set.new
  Dir.glob('log/*').each do |dir|
    unless dir =~ /^log\/latest$/
      Dir.glob("#{dir}/*").each do |date_dir|
        preserved_config_path = "#{date_dir}/#{SUTS_FILENAME}"
        if preserved_config = File.exists?(preserved_config_path)
          directory = File.new(date_dir)
          yesterday = Time.now - secs_ago.to_i
          if directory.ctime > yesterday
            File.open(preserved_config_path, 'r') do |file|
              if file.ctime > yesterday
                file.each_line do |line|
                  matchdata = /(\w+\.delivery\.puppetlabs\.net) \(.*?\)$/.match(line)
                  hosts.add(matchdata[1]) if matchdata
                end
              end
            end
          end
        end
      end
    end
  end
  hosts
end

# Plagiarized from Beaker::Vcloud#cleanup
def destroy_preserved_hosts(hosts = nil, secs_ago = ONE_DAY_IN_SECS)
  secs_ago ||= ONE_DAY_IN_SECS
  hosts ||= list_preserved_hosts(secs_ago)

  require 'beaker/hypervisor/vsphere_helper'
  vsphere_credentials = VsphereHelper.load_config("#{ENV['HOME']}/.fog")

  puts "Connecting to vSphere at #{vsphere_credentials[:server]}" +
    " with credentials for #{vsphere_credentials[:user]}"

  vsphere_helper = VsphereHelper.new( vsphere_credentials )

  vm_names = hosts.to_a
  pp vm_names
  vms = vsphere_helper.find_vms vm_names
  vm_names.each do |name|
    unless vm = vms[name]
      puts "Couldn't find VM #{name} in vSphere!"
      next
    end

    if vm.runtime.powerState == 'poweredOn'
      puts "Shutting down #{vm.name}"
      start = Time.now
      vm.PowerOffVM_Task.wait_for_completion
      puts "Spent %.2f seconds halting #{vm.name}" % (Time.now - start)
    end

    start = Time.now
    vm.Destroy_Task
    puts "Spent %.2f seconds destroying #{vm.name}" % (Time.now - start)
  end

  vsphere_helper.close
end

def print_preserved(preserved)
  preserved.each do |entry|
    puts entry
  end
end

def beaker_run_type
  type = ENV['TYPE'] || :aio
  type = type.to_sym
end

def sha
  ENV['SHA'] || ENV['GIT_SHA']
end

namespace :ci do
  namespace :test do

    USAGE = <<-EOS
May specify project SHA environment variable, which can be a branch, release version number, or commit SHA.
Also must set HOSTS=config/nodes/foo.yaml or include it in an options.rb for Beaker.
You may set TESTS=path/to/test,and/more/tests.
You may set additional Beaker OPTIONS='--more --options'
If there is a Beaker options hash in a ./local_options.rb, it will be included.  Commandline options set through the above environment variables will override settings in this file.
    EOS

    desc <<-EOS
Run the acceptance tests through Beaker and install packages as part of the AIO puppet-agent installation.
    #{USAGE}
    EOS
    task :aio do
      beaker_test(:aio)
    end
  end
end

desc "DEPRECATED: Beaker now does this automatically."
task :extract_preserved_config

desc <<-EOS
Run an acceptance test for a given node configuration and preserve the hosts.
#{USAGE}
EOS
task :test_and_preserve_hosts do
  beaker_test(beaker_run_type, :preserve_hosts => 'always')
end

desc "List acceptance runs from the past day which had hosts preserved."
task :list_preserved do
  preserved = list_preserved_hosts
  print_preserved(preserved)
end

desc <<-EOS
Shutdown and destroy any hosts that we have preserved for testing.  These should be reaped daily by scripts, but this will free up resources immediately.
Specify a list of comma separated HOST_NAMES if you have a set of dynamic vcloud host names you want to purge outside of what can be grepped from the logs.
You can go back through the last SECS_AGO logs.  Default is one day ago in secs.
EOS
task :destroy_preserved_hosts do
  host_names = ENV['HOST_NAMES'].split(',') if ENV['HOST_NAMES']
  secs_ago = ENV['SECS_AGO']
  destroy_preserved_hosts(host_names, secs_ago)
end

desc <<-EOS
Rerun an acceptance test using hosts_preserved.yaml to skip provisioning.
EOS
task :test_against_preserved_hosts do
  preserved = list_preserved_configurations
  print_preserved(preserved)
  config_number = (ENV['CONFIG_NUMBER'] || 0).to_i
  config_path = preserved[config_number][0]
  puts "Using ##{config_number}: #{config_path}"
  beaker_test(beaker_run_type,
              :hosts_file => "log/latest/#{PRESERVED_HOSTS_FILENAME}"
             )
end

task :default do
  sh('rake -T')
end
